[{"content":"1-关于变量 1.1 常量\n1 2 3 4 5 const typename var = val; 声明常量 char * const p 表示指针 p 指向的位置不能改变，但是指向的内容（一个 char）可以改变 const char *p 表示指针 p 指向的内容不能改变，但是指向的位置可以改变 char const *p 同理等价 const char * const p p 指向的位置和内容都不能修改 1.2 动态内存\n使用 new 分配，创建对象，返回指针\n1 2 3 T *p = new T[N] 分配 N 个 T 类型的对象，返回指向第一个对象的指针 delete p 释放 p 指向的内存 p 本身不会变为 NULL delete[] p 释放 p 指向的内存 2-关于类 -C++ 中 class 和 struct 并无本质区别，只是默认的访问权限不同（class 默认 private，struct 默认 public）\n-:: 称为域解析器（resolver），前面什么都不带则解析到自由变量 / 函数（即全局作用域内）\n-成员函数直接在类内部定义的话默认为 inline（不推荐）\n权限有三种：\npublic：公有 private：私有（只有同类可以访问） 注意边界是类不是对象，成员函数中可以访问同一类的其他对象的私有成员 protected：保护（只有同类和子类可以访问） 2.1 构造函数\n命名与类名完全相同\n构造函数名称必须与类名一致，无返回值（包括 void）。\n自动调用\n对象创建时由编译器自动调用，无需显式调用。\n可重载\n支持多个构造函数，通过参数列表（类型、数量、顺序）区分。\n访问控制\n可设为 public、protected 或 private，影响对象创建方式（如单例模式）。\n语法\n以冒号 : 开头，后跟成员变量及其初始化表达式：\n1 2 3 4 5 6 7 class Student { public: Student(int id, const string\u0026amp; name) : studentId(id), studentName(name) {} private: const int studentId; // 必须使用初始化列表 string studentName; }; 必要性\n对const成员、引用成员、无默认构造函数的类成员必须使用初始化列表。 提高性能：避免先默认初始化再赋值的额外开销。 ","date":"2025-05-06T00:00:00Z","permalink":"https://example.com/p/test-chinese/","title":"C++面向对象"}]